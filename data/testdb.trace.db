2024-07-22 15:58:08.096131+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "DATABASECHANGELOGLOCK" not found; SQL statement:
SELECT COUNT(*) FROM PUBLIC.DATABASECHANGELOGLOCK [42102-224]
2024-07-22 15:58:08.169586+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column count does not match; SQL statement:
INSERT INTO books VALUES(default, 1, '2024-07-01', 2, 'Використання штучного інтелекту', 'штучний інтелект') [21002-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:514)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.command.dml.Insert.doPrepare(Insert.java:295)
	at org.h2.command.dml.DataChangeStatement.prepare(DataChangeStatement.java:37)
	at org.h2.command.Parser.prepareCommand(Parser.java:489)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:639)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:559)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1166)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:245)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at liquibase.executor.jvm.JdbcExecutor$ExecuteStatementCallback.doInStatement(JdbcExecutor.java:467)
	at liquibase.executor.jvm.JdbcExecutor.execute(JdbcExecutor.java:80)
	at liquibase.executor.jvm.JdbcExecutor.execute(JdbcExecutor.java:182)
	at liquibase.executor.AbstractExecutor.execute(AbstractExecutor.java:141)
	at liquibase.database.AbstractJdbcDatabase.executeStatements(AbstractJdbcDatabase.java:1176)
	at liquibase.changelog.ChangeSet.execute(ChangeSet.java:764)
	at liquibase.changelog.visitor.UpdateVisitor.executeAcceptedChange(UpdateVisitor.java:119)
	at liquibase.changelog.visitor.UpdateVisitor.visit(UpdateVisitor.java:68)
	at liquibase.changelog.ChangeLogIterator$2.lambda$run$0(ChangeLogIterator.java:133)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.changelog.ChangeLogIterator$2.run(ChangeLogIterator.java:122)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.Scope.child(Scope.java:256)
	at liquibase.Scope.child(Scope.java:260)
	at liquibase.changelog.ChangeLogIterator.run(ChangeLogIterator.java:89)
	at liquibase.command.core.AbstractUpdateCommandStep.lambda$run$0(AbstractUpdateCommandStep.java:112)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.command.core.AbstractUpdateCommandStep.run(AbstractUpdateCommandStep.java:110)
	at liquibase.command.core.UpdateCommandStep.run(UpdateCommandStep.java:105)
	at liquibase.command.CommandScope.execute(CommandScope.java:219)
	at liquibase.Liquibase.lambda$update$0(Liquibase.java:245)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.Liquibase.runInScope(Liquibase.java:1436)
	at liquibase.Liquibase.update(Liquibase.java:234)
	at liquibase.Liquibase.update(Liquibase.java:212)
	at liquibase.integration.spring.SpringLiquibase.performUpdate(SpringLiquibase.java:297)
	at liquibase.integration.spring.SpringLiquibase.lambda$afterPropertiesSet$0(SpringLiquibase.java:249)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.Scope.child(Scope.java:256)
	at liquibase.integration.spring.SpringLiquibase.afterPropertiesSet(SpringLiquibase.java:242)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1835)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1784)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:313)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:205)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:952)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:335)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1363)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1352)
	at com.example.teachers_db_demo.TeachersDbDemoApplication.main(TeachersDbDemoApplication.java:10)
2024-07-22 15:58:26.067284+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column count does not match; SQL statement:
INSERT INTO books VALUES(default, 1, '2024-07-01', 2, 'Використання штучного інтелекту', 'штучний інтелект') [21002-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:514)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.command.dml.Insert.doPrepare(Insert.java:295)
	at org.h2.command.dml.DataChangeStatement.prepare(DataChangeStatement.java:37)
	at org.h2.command.Parser.prepareCommand(Parser.java:489)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:639)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:559)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1166)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:245)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at liquibase.executor.jvm.JdbcExecutor$ExecuteStatementCallback.doInStatement(JdbcExecutor.java:467)
	at liquibase.executor.jvm.JdbcExecutor.execute(JdbcExecutor.java:80)
	at liquibase.executor.jvm.JdbcExecutor.execute(JdbcExecutor.java:182)
	at liquibase.executor.AbstractExecutor.execute(AbstractExecutor.java:141)
	at liquibase.database.AbstractJdbcDatabase.executeStatements(AbstractJdbcDatabase.java:1176)
	at liquibase.changelog.ChangeSet.execute(ChangeSet.java:764)
	at liquibase.changelog.visitor.UpdateVisitor.executeAcceptedChange(UpdateVisitor.java:119)
	at liquibase.changelog.visitor.UpdateVisitor.visit(UpdateVisitor.java:68)
	at liquibase.changelog.ChangeLogIterator$2.lambda$run$0(ChangeLogIterator.java:133)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.changelog.ChangeLogIterator$2.run(ChangeLogIterator.java:122)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.Scope.child(Scope.java:256)
	at liquibase.Scope.child(Scope.java:260)
	at liquibase.changelog.ChangeLogIterator.run(ChangeLogIterator.java:89)
	at liquibase.command.core.AbstractUpdateCommandStep.lambda$run$0(AbstractUpdateCommandStep.java:112)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.command.core.AbstractUpdateCommandStep.run(AbstractUpdateCommandStep.java:110)
	at liquibase.command.core.UpdateCommandStep.run(UpdateCommandStep.java:105)
	at liquibase.command.CommandScope.execute(CommandScope.java:219)
	at liquibase.Liquibase.lambda$update$0(Liquibase.java:245)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.Liquibase.runInScope(Liquibase.java:1436)
	at liquibase.Liquibase.update(Liquibase.java:234)
	at liquibase.Liquibase.update(Liquibase.java:212)
	at liquibase.integration.spring.SpringLiquibase.performUpdate(SpringLiquibase.java:297)
	at liquibase.integration.spring.SpringLiquibase.lambda$afterPropertiesSet$0(SpringLiquibase.java:249)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.Scope.child(Scope.java:256)
	at liquibase.integration.spring.SpringLiquibase.afterPropertiesSet(SpringLiquibase.java:242)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1835)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1784)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:313)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:205)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:952)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:335)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1363)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1352)
	at com.example.teachers_db_demo.TeachersDbDemoApplication.main(TeachersDbDemoApplication.java:10)
2024-07-22 16:00:14.304850+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column count does not match; SQL statement:
INSERT INTO books VALUES(default, 1, '2024-07-01', 2, 'Використання штучного інтелекту', 'штучний інтелект') [21002-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:514)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.command.dml.Insert.doPrepare(Insert.java:295)
	at org.h2.command.dml.DataChangeStatement.prepare(DataChangeStatement.java:37)
	at org.h2.command.Parser.prepareCommand(Parser.java:489)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:639)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:559)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1166)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:245)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at liquibase.executor.jvm.JdbcExecutor$ExecuteStatementCallback.doInStatement(JdbcExecutor.java:467)
	at liquibase.executor.jvm.JdbcExecutor.execute(JdbcExecutor.java:80)
	at liquibase.executor.jvm.JdbcExecutor.execute(JdbcExecutor.java:182)
	at liquibase.executor.AbstractExecutor.execute(AbstractExecutor.java:141)
	at liquibase.database.AbstractJdbcDatabase.executeStatements(AbstractJdbcDatabase.java:1176)
	at liquibase.changelog.ChangeSet.execute(ChangeSet.java:764)
	at liquibase.changelog.visitor.UpdateVisitor.executeAcceptedChange(UpdateVisitor.java:119)
	at liquibase.changelog.visitor.UpdateVisitor.visit(UpdateVisitor.java:68)
	at liquibase.changelog.ChangeLogIterator$2.lambda$run$0(ChangeLogIterator.java:133)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.changelog.ChangeLogIterator$2.run(ChangeLogIterator.java:122)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.Scope.child(Scope.java:256)
	at liquibase.Scope.child(Scope.java:260)
	at liquibase.changelog.ChangeLogIterator.run(ChangeLogIterator.java:89)
	at liquibase.command.core.AbstractUpdateCommandStep.lambda$run$0(AbstractUpdateCommandStep.java:112)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.command.core.AbstractUpdateCommandStep.run(AbstractUpdateCommandStep.java:110)
	at liquibase.command.core.UpdateCommandStep.run(UpdateCommandStep.java:105)
	at liquibase.command.CommandScope.execute(CommandScope.java:219)
	at liquibase.Liquibase.lambda$update$0(Liquibase.java:245)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.Liquibase.runInScope(Liquibase.java:1436)
	at liquibase.Liquibase.update(Liquibase.java:234)
	at liquibase.Liquibase.update(Liquibase.java:212)
	at liquibase.integration.spring.SpringLiquibase.performUpdate(SpringLiquibase.java:297)
	at liquibase.integration.spring.SpringLiquibase.lambda$afterPropertiesSet$0(SpringLiquibase.java:249)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.Scope.child(Scope.java:256)
	at liquibase.integration.spring.SpringLiquibase.afterPropertiesSet(SpringLiquibase.java:242)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1835)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1784)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:313)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:205)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:952)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:335)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1363)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1352)
	at com.example.teachers_db_demo.TeachersDbDemoApplication.main(TeachersDbDemoApplication.java:10)
2024-07-22 16:03:25.587928+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "[*]package com.example.teachers_db_demo.model;\000a\000aimport jakarta.persistence.*;\000aimport java.util.Date;\000a\000a@Entity\000a@Table(name = ""books"")\000apublic class Book  \000a  @Id\000a  @GeneratedValue(strategy = GenerationType.IDENTITY)\000a  private Long id;\000a\000a  @ManyToOne\000a  @JoinColumn(name=""author_id"", nullable = false)\000a  private Author author;\000a\000a  @Column(name = ""data"", nullable = false)\000a  @Temporal(TemporalType.DATE)\000a  private Date data;\000a\000a  @ManyToOne\000a  @JoinColumn(name = ""category_id"", nullable = false)\000a  private Category category;\000a\000a  @Column(name = ""title"", nullable = false, length = 150)\000a  private String title;\000a\000a  @Column(name = ""annotation"", nullable = false, length = 255)\000a  private String annotation;\000a\000a  @Column(name = ""pdf_content"")\000a  private byte[] pdf;\000a\000a  // Getters and setters\000a  public Long getId()  \000a    return id;\000a   \000a\000a  public void setId(Long id)  \000a    this.id = id;\000a   \000a\000a  public Author getAuthor()  \000a    return author;\000a   \000a\000a  public void setAuthor(Author author)  \000a    this.author = author;\000a   \000a\000a  public Date getData()  \000a    return data;\000a   \000a\000a  public void setData(Date data)  \000a    this.data = data;\000a   \000a\000a  public Category getCategory()  \000a    return category;\000a   \000a\000a  public void setCategory(Category category)  \000a    this.category = category;\000a   \000a\000a  public String getTitle()  \000a    return title;\000a   \000a\000a  public void setTitle(String title)  \000a    this.title = title;\000a   \000a\000a  public String getAnnotation()  \000a    return annotation;\000a   \000a\000a  public void setAnnotation(String annotation)  \000a    this.annotation = annotation;\000a   \000a\000a  public byte[] getPdf()  \000a    return pdf;\000a   \000a\000a  public void setPdf(byte[] pdf)  \000a    this.pdf = pdf;"; expected "PREPARE"; SQL statement:
package com.example.teachers_db_demo.model;

import jakarta.persistence.*;
import java.util.Date;

@Entity
@Table(name = "books")
public class Book  
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @ManyToOne
  @JoinColumn(name="author_id", nullable = false)
  private Author author;

  @Column(name = "data", nullable = false)
  @Temporal(TemporalType.DATE)
  private Date data;

  @ManyToOne
  @JoinColumn(name = "category_id", nullable = false)
  private Category category;

  @Column(name = "title", nullable = false, length = 150)
  private String title;

  @Column(name = "annotation", nullable = false, length = 255)
  private String annotation;

  @Column(name = "pdf_content")
  private byte[] pdf;

  // Getters and setters
  public Long getId()  
    return id;
   

  public void setId(Long id)  
    this.id = id;
   

  public Author getAuthor()  
    return author;
   

  public void setAuthor(Author author)  
    this.author = author;
   

  public Date getData()  
    return data;
   

  public void setData(Date data)  
    this.data = data;
   

  public Category getCategory()  
    return category;
   

  public void setCategory(Category category)  
    this.category = category;
   

  public String getTitle()  
    return title;
   

  public void setTitle(String title)  
    this.title = title;
   

  public String getAnnotation()  
    return annotation;
   

  public void setAnnotation(String annotation)  
    this.annotation = annotation;
   

  public byte[] getPdf()  
    return pdf;
   

  public void setPdf(byte[] pdf)  
    this.pdf = pdf; [42001-224]
2024-07-22 16:08:24.121326+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "[*]package com.example.teachers_db_demo.model;\000a\000aimport jakarta.persistence.*;\000aimport java.util.Date;\000a\000a@Entity\000a@Table(name = ""books"")\000apublic class Book  \000a  @Id\000a  @GeneratedValue(strategy = GenerationType.IDENTITY)\000a  private Long id;\000a\000a  @ManyToOne\000a  @JoinColumn(name=""author_id"", nullable = false)\000a  private Author author;\000a\000a  @Column(name = ""data"", nullable = false)\000a  @Temporal(TemporalType.DATE)\000a  private Date data;\000a\000a  @ManyToOne\000a  @JoinColumn(name = ""category_id"", nullable = false)\000a  private Category category;\000a\000a  @Column(name = ""title"", nullable = false, length = 150)\000a  private String title;\000a\000a  @Column(name = ""annotation"", nullable = false, length = 255)\000a  private String annotation;\000a\000a  @Column(name = ""pdf_content"")\000a  private byte[] pdf;\000a\000a  // Getters and setters\000a  public Long getId()  \000a    return id;\000a   \000a\000a  public void setId(Long id)  \000a    this.id = id;\000a   \000a\000a  public Author getAuthor()  \000a    return author;\000a   \000a\000a  public void setAuthor(Author author)  \000a    this.author = author;\000a   \000a\000a  public Date getData()  \000a    return data;\000a   \000a\000a  public void setData(Date data)  \000a    this.data = data;\000a   \000a\000a  public Category getCategory()  \000a    return category;\000a   \000a\000a  public void setCategory(Category category)  \000a    this.category = category;\000a   \000a\000a  public String getTitle()  \000a    return title;\000a   \000a\000a  public void setTitle(String title)  \000a    this.title = title;\000a   \000a\000a  public String getAnnotation()  \000a    return annotation;\000a   \000a\000a  public void setAnnotation(String annotation)  \000a    this.annotation = annotation;\000a   \000a\000a  public byte[] getPdf()  \000a    return pdf;\000a   \000a\000a  public void setPdf(byte[] pdf)  \000a    this.pdf = pdf;"; expected "PREPARE"; SQL statement:
package com.example.teachers_db_demo.model;

import jakarta.persistence.*;
import java.util.Date;

@Entity
@Table(name = "books")
public class Book  
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @ManyToOne
  @JoinColumn(name="author_id", nullable = false)
  private Author author;

  @Column(name = "data", nullable = false)
  @Temporal(TemporalType.DATE)
  private Date data;

  @ManyToOne
  @JoinColumn(name = "category_id", nullable = false)
  private Category category;

  @Column(name = "title", nullable = false, length = 150)
  private String title;

  @Column(name = "annotation", nullable = false, length = 255)
  private String annotation;

  @Column(name = "pdf_content")
  private byte[] pdf;

  // Getters and setters
  public Long getId()  
    return id;
   

  public void setId(Long id)  
    this.id = id;
   

  public Author getAuthor()  
    return author;
   

  public void setAuthor(Author author)  
    this.author = author;
   

  public Date getData()  
    return data;
   

  public void setData(Date data)  
    this.data = data;
   

  public Category getCategory()  
    return category;
   

  public void setCategory(Category category)  
    this.category = category;
   

  public String getTitle()  
    return title;
   

  public void setTitle(String title)  
    this.title = title;
   

  public String getAnnotation()  
    return annotation;
   

  public void setAnnotation(String annotation)  
    this.annotation = annotation;
   

  public byte[] getPdf()  
    return pdf;
   

  public void setPdf(byte[] pdf)  
    this.pdf = pdf; [42001-224]
2024-07-22 16:12:39.281879+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "[*]package com.example.teachers_db_demo.model;\000a\000aimport jakarta.persistence.*;\000aimport java.util.Date;\000a\000a@Entity\000a@Table(name = ""books"")\000apublic class Book  \000a  @Id\000a  @GeneratedValue(strategy = GenerationType.IDENTITY)\000a  private Long id;\000a\000a  @ManyToOne\000a  @JoinColumn(name=""author_id"", nullable = false)\000a  private Author author;\000a\000a  @Column(name = ""data"", nullable = false)\000a  @Temporal(TemporalType.DATE)\000a  private Date data;\000a\000a  @ManyToOne\000a  @JoinColumn(name = ""category_id"", nullable = false)\000a  private Category category;\000a\000a  @Column(name = ""title"", nullable = false, length = 150)\000a  private String title;\000a\000a  @Column(name = ""annotation"", nullable = false, length = 255)\000a  private String annotation;\000a\000a  @Column(name = ""pdf_content"")\000a  private byte[] pdf;\000a\000a  // Getters and setters\000a  public Long getId()  \000a    return id;\000a   \000a\000a  public void setId(Long id)  \000a    this.id = id;\000a   \000a\000a  public Author getAuthor()  \000a    return author;\000a   \000a\000a  public void setAuthor(Author author)  \000a    this.author = author;\000a   \000a\000a  public Date getData()  \000a    return data;\000a   \000a\000a  public void setData(Date data)  \000a    this.data = data;\000a   \000a\000a  public Category getCategory()  \000a    return category;\000a   \000a\000a  public void setCategory(Category category)  \000a    this.category = category;\000a   \000a\000a  public String getTitle()  \000a    return title;\000a   \000a\000a  public void setTitle(String title)  \000a    this.title = title;\000a   \000a\000a  public String getAnnotation()  \000a    return annotation;\000a   \000a\000a  public void setAnnotation(String annotation)  \000a    this.annotation = annotation;\000a   \000a\000a  public byte[] getPdf()  \000a    return pdf;\000a   \000a\000a  public void setPdf(byte[] pdf)  \000a    this.pdf = pdf;"; expected "PREPARE"; SQL statement:
package com.example.teachers_db_demo.model;

import jakarta.persistence.*;
import java.util.Date;

@Entity
@Table(name = "books")
public class Book  
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @ManyToOne
  @JoinColumn(name="author_id", nullable = false)
  private Author author;

  @Column(name = "data", nullable = false)
  @Temporal(TemporalType.DATE)
  private Date data;

  @ManyToOne
  @JoinColumn(name = "category_id", nullable = false)
  private Category category;

  @Column(name = "title", nullable = false, length = 150)
  private String title;

  @Column(name = "annotation", nullable = false, length = 255)
  private String annotation;

  @Column(name = "pdf_content")
  private byte[] pdf;

  // Getters and setters
  public Long getId()  
    return id;
   

  public void setId(Long id)  
    this.id = id;
   

  public Author getAuthor()  
    return author;
   

  public void setAuthor(Author author)  
    this.author = author;
   

  public Date getData()  
    return data;
   

  public void setData(Date data)  
    this.data = data;
   

  public Category getCategory()  
    return category;
   

  public void setCategory(Category category)  
    this.category = category;
   

  public String getTitle()  
    return title;
   

  public void setTitle(String title)  
    this.title = title;
   

  public String getAnnotation()  
    return annotation;
   

  public void setAnnotation(String annotation)  
    this.annotation = annotation;
   

  public byte[] getPdf()  
    return pdf;
   

  public void setPdf(byte[] pdf)  
    this.pdf = pdf; [42001-224]
2024-07-22 16:16:21.343230+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "[*]package com.example.teachers_db_demo.model;\000a\000aimport jakarta.persistence.*;\000aimport java.util.Date;\000a\000a@Entity\000a@Table(name = ""books"")\000apublic class Book  \000a  @Id\000a  @GeneratedValue(strategy = GenerationType.IDENTITY)\000a  private Long id;\000a\000a  @ManyToOne\000a  @JoinColumn(name=""author_id"", nullable = false)\000a  private Author author;\000a\000a  @Column(name = ""data"", nullable = false)\000a  @Temporal(TemporalType.DATE)\000a  private Date data;\000a\000a  @ManyToOne\000a  @JoinColumn(name = ""category_id"", nullable = false)\000a  private Category category;\000a\000a  @Column(name = ""title"", nullable = false, length = 150)\000a  private String title;\000a\000a  @Column(name = ""annotation"", nullable = false, length = 255)\000a  private String annotation;\000a\000a  @Column(name = ""pdf_content"")\000a  private byte[] pdf;\000a\000a  // Getters and setters\000a  public Long getId()  \000a    return id;\000a   \000a\000a  public void setId(Long id)  \000a    this.id = id;\000a   \000a\000a  public Author getAuthor()  \000a    return author;\000a   \000a\000a  public void setAuthor(Author author)  \000a    this.author = author;\000a   \000a\000a  public Date getData()  \000a    return data;\000a   \000a\000a  public void setData(Date data)  \000a    this.data = data;\000a   \000a\000a  public Category getCategory()  \000a    return category;\000a   \000a\000a  public void setCategory(Category category)  \000a    this.category = category;\000a   \000a\000a  public String getTitle()  \000a    return title;\000a   \000a\000a  public void setTitle(String title)  \000a    this.title = title;\000a   \000a\000a  public String getAnnotation()  \000a    return annotation;\000a   \000a\000a  public void setAnnotation(String annotation)  \000a    this.annotation = annotation;\000a   \000a\000a  public byte[] getPdf()  \000a    return pdf;\000a   \000a\000a  public void setPdf(byte[] pdf)  \000a    this.pdf = pdf;"; expected "PREPARE"; SQL statement:
package com.example.teachers_db_demo.model;

import jakarta.persistence.*;
import java.util.Date;

@Entity
@Table(name = "books")
public class Book  
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @ManyToOne
  @JoinColumn(name="author_id", nullable = false)
  private Author author;

  @Column(name = "data", nullable = false)
  @Temporal(TemporalType.DATE)
  private Date data;

  @ManyToOne
  @JoinColumn(name = "category_id", nullable = false)
  private Category category;

  @Column(name = "title", nullable = false, length = 150)
  private String title;

  @Column(name = "annotation", nullable = false, length = 255)
  private String annotation;

  @Column(name = "pdf_content")
  private byte[] pdf;

  // Getters and setters
  public Long getId()  
    return id;
   

  public void setId(Long id)  
    this.id = id;
   

  public Author getAuthor()  
    return author;
   

  public void setAuthor(Author author)  
    this.author = author;
   

  public Date getData()  
    return data;
   

  public void setData(Date data)  
    this.data = data;
   

  public Category getCategory()  
    return category;
   

  public void setCategory(Category category)  
    this.category = category;
   

  public String getTitle()  
    return title;
   

  public void setTitle(String title)  
    this.title = title;
   

  public String getAnnotation()  
    return annotation;
   

  public void setAnnotation(String annotation)  
    this.annotation = annotation;
   

  public byte[] getPdf()  
    return pdf;
   

  public void setPdf(byte[] pdf)  
    this.pdf = pdf; [42001-224]
2024-07-22 16:17:46.217355+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "[*]package com.example.teachers_db_demo.model;\000a\000aimport jakarta.persistence.*;\000aimport java.util.Date;\000a\000a@Entity\000a@Table(name = ""books"")\000apublic class Book  \000a  @Id\000a  @GeneratedValue(strategy = GenerationType.IDENTITY)\000a  private Long id;\000a\000a  @ManyToOne\000a  @JoinColumn(name=""author_id"", nullable = false)\000a  private Author author;\000a\000a  @Column(name = ""data"", nullable = false)\000a  @Temporal(TemporalType.DATE)\000a  private Date data;\000a\000a  @ManyToOne\000a  @JoinColumn(name = ""category_id"", nullable = false)\000a  private Category category;\000a\000a  @Column(name = ""title"", nullable = false, length = 150)\000a  private String title;\000a\000a  @Column(name = ""annotation"", nullable = false, length = 255)\000a  private String annotation;\000a\000a  @Column(name = ""pdf_content"")\000a  private byte[] pdf;\000a\000a  // Getters and setters\000a  public Long getId()  \000a    return id;\000a   \000a\000a  public void setId(Long id)  \000a    this.id = id;\000a   \000a\000a  public Author getAuthor()  \000a    return author;\000a   \000a\000a  public void setAuthor(Author author)  \000a    this.author = author;\000a   \000a\000a  public Date getData()  \000a    return data;\000a   \000a\000a  public void setData(Date data)  \000a    this.data = data;\000a   \000a\000a  public Category getCategory()  \000a    return category;\000a   \000a\000a  public void setCategory(Category category)  \000a    this.category = category;\000a   \000a\000a  public String getTitle()  \000a    return title;\000a   \000a\000a  public void setTitle(String title)  \000a    this.title = title;\000a   \000a\000a  public String getAnnotation()  \000a    return annotation;\000a   \000a\000a  public void setAnnotation(String annotation)  \000a    this.annotation = annotation;\000a   \000a\000a  public byte[] getPdf()  \000a    return pdf;\000a   \000a\000a  public void setPdf(byte[] pdf)  \000a    this.pdf = pdf;"; expected "PREPARE"; SQL statement:
package com.example.teachers_db_demo.model;

import jakarta.persistence.*;
import java.util.Date;

@Entity
@Table(name = "books")
public class Book  
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @ManyToOne
  @JoinColumn(name="author_id", nullable = false)
  private Author author;

  @Column(name = "data", nullable = false)
  @Temporal(TemporalType.DATE)
  private Date data;

  @ManyToOne
  @JoinColumn(name = "category_id", nullable = false)
  private Category category;

  @Column(name = "title", nullable = false, length = 150)
  private String title;

  @Column(name = "annotation", nullable = false, length = 255)
  private String annotation;

  @Column(name = "pdf_content")
  private byte[] pdf;

  // Getters and setters
  public Long getId()  
    return id;
   

  public void setId(Long id)  
    this.id = id;
   

  public Author getAuthor()  
    return author;
   

  public void setAuthor(Author author)  
    this.author = author;
   

  public Date getData()  
    return data;
   

  public void setData(Date data)  
    this.data = data;
   

  public Category getCategory()  
    return category;
   

  public void setCategory(Category category)  
    this.category = category;
   

  public String getTitle()  
    return title;
   

  public void setTitle(String title)  
    this.title = title;
   

  public String getAnnotation()  
    return annotation;
   

  public void setAnnotation(String annotation)  
    this.annotation = annotation;
   

  public byte[] getPdf()  
    return pdf;
   

  public void setPdf(byte[] pdf)  
    this.pdf = pdf; [42001-224]
2024-07-22 16:22:29.324244+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "[*]package com.example.teachers_db_demo.model;\000a\000aimport jakarta.persistence.*;\000aimport java.util.Date;\000a\000a@Entity\000a@Table(name = ""books"")\000apublic class Book  \000a  @Id\000a  @GeneratedValue(strategy = GenerationType.IDENTITY)\000a  private Long id;\000a\000a  @ManyToOne\000a  @JoinColumn(name=""author_id"", nullable = false)\000a  private Author author;\000a\000a  @Column(name = ""data"", nullable = false)\000a  @Temporal(TemporalType.DATE)\000a  private Date data;\000a\000a  @ManyToOne\000a  @JoinColumn(name = ""category_id"", nullable = false)\000a  private Category category;\000a\000a  @Column(name = ""title"", nullable = false, length = 150)\000a  private String title;\000a\000a  @Column(name = ""annotation"", nullable = false, length = 255)\000a  private String annotation;\000a\000a  @Column(name = ""pdf_content"")\000a  private byte[] pdf;\000a\000a  // Getters and setters\000a  public Long getId()  \000a    return id;\000a   \000a\000a  public void setId(Long id)  \000a    this.id = id;\000a   \000a\000a  public Author getAuthor()  \000a    return author;\000a   \000a\000a  public void setAuthor(Author author)  \000a    this.author = author;\000a   \000a\000a  public Date getData()  \000a    return data;\000a   \000a\000a  public void setData(Date data)  \000a    this.data = data;\000a   \000a\000a  public Category getCategory()  \000a    return category;\000a   \000a\000a  public void setCategory(Category category)  \000a    this.category = category;\000a   \000a\000a  public String getTitle()  \000a    return title;\000a   \000a\000a  public void setTitle(String title)  \000a    this.title = title;\000a   \000a\000a  public String getAnnotation()  \000a    return annotation;\000a   \000a\000a  public void setAnnotation(String annotation)  \000a    this.annotation = annotation;\000a   \000a\000a  public byte[] getPdf()  \000a    return pdf;\000a   \000a\000a  public void setPdf(byte[] pdf)  \000a    this.pdf = pdf;"; expected "PREPARE"; SQL statement:
package com.example.teachers_db_demo.model;

import jakarta.persistence.*;
import java.util.Date;

@Entity
@Table(name = "books")
public class Book  
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @ManyToOne
  @JoinColumn(name="author_id", nullable = false)
  private Author author;

  @Column(name = "data", nullable = false)
  @Temporal(TemporalType.DATE)
  private Date data;

  @ManyToOne
  @JoinColumn(name = "category_id", nullable = false)
  private Category category;

  @Column(name = "title", nullable = false, length = 150)
  private String title;

  @Column(name = "annotation", nullable = false, length = 255)
  private String annotation;

  @Column(name = "pdf_content")
  private byte[] pdf;

  // Getters and setters
  public Long getId()  
    return id;
   

  public void setId(Long id)  
    this.id = id;
   

  public Author getAuthor()  
    return author;
   

  public void setAuthor(Author author)  
    this.author = author;
   

  public Date getData()  
    return data;
   

  public void setData(Date data)  
    this.data = data;
   

  public Category getCategory()  
    return category;
   

  public void setCategory(Category category)  
    this.category = category;
   

  public String getTitle()  
    return title;
   

  public void setTitle(String title)  
    this.title = title;
   

  public String getAnnotation()  
    return annotation;
   

  public void setAnnotation(String annotation)  
    this.annotation = annotation;
   

  public byte[] getPdf()  
    return pdf;
   

  public void setPdf(byte[] pdf)  
    this.pdf = pdf; [42001-224]
2024-07-22 16:26:48.655961+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "[*]package com.example.teachers_db_demo.model;\000a\000aimport jakarta.persistence.*;\000aimport java.util.Date;\000a\000a@Entity\000a@Table(name = ""books"")\000apublic class Book  \000a  @Id\000a  @GeneratedValue(strategy = GenerationType.IDENTITY)\000a  private Long id;\000a\000a  @ManyToOne\000a  @JoinColumn(name=""author_id"", nullable = false)\000a  private Author author;\000a\000a  @Column(name = ""data"", nullable = false)\000a  @Temporal(TemporalType.DATE)\000a  private Date data;\000a\000a  @ManyToOne\000a  @JoinColumn(name = ""category_id"", nullable = false)\000a  private Category category;\000a\000a  @Column(name = ""title"", nullable = false, length = 150)\000a  private String title;\000a\000a  @Column(name = ""annotation"", nullable = false, length = 255)\000a  private String annotation;\000a\000a  @Column(name = ""pdf_content"")\000a  private byte[] pdf;\000a\000a  // Getters and setters\000a  public Long getId()  \000a    return id;\000a   \000a\000a  public void setId(Long id)  \000a    this.id = id;\000a   \000a\000a  public Author getAuthor()  \000a    return author;\000a   \000a\000a  public void setAuthor(Author author)  \000a    this.author = author;\000a   \000a\000a  public Date getData()  \000a    return data;\000a   \000a\000a  public void setData(Date data)  \000a    this.data = data;\000a   \000a\000a  public Category getCategory()  \000a    return category;\000a   \000a\000a  public void setCategory(Category category)  \000a    this.category = category;\000a   \000a\000a  public String getTitle()  \000a    return title;\000a   \000a\000a  public void setTitle(String title)  \000a    this.title = title;\000a   \000a\000a  public String getAnnotation()  \000a    return annotation;\000a   \000a\000a  public void setAnnotation(String annotation)  \000a    this.annotation = annotation;\000a   \000a\000a  public byte[] getPdf()  \000a    return pdf;\000a   \000a\000a  public void setPdf(byte[] pdf)  \000a    this.pdf = pdf;"; expected "PREPARE"; SQL statement:
package com.example.teachers_db_demo.model;

import jakarta.persistence.*;
import java.util.Date;

@Entity
@Table(name = "books")
public class Book  
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @ManyToOne
  @JoinColumn(name="author_id", nullable = false)
  private Author author;

  @Column(name = "data", nullable = false)
  @Temporal(TemporalType.DATE)
  private Date data;

  @ManyToOne
  @JoinColumn(name = "category_id", nullable = false)
  private Category category;

  @Column(name = "title", nullable = false, length = 150)
  private String title;

  @Column(name = "annotation", nullable = false, length = 255)
  private String annotation;

  @Column(name = "pdf_content")
  private byte[] pdf;

  // Getters and setters
  public Long getId()  
    return id;
   

  public void setId(Long id)  
    this.id = id;
   

  public Author getAuthor()  
    return author;
   

  public void setAuthor(Author author)  
    this.author = author;
   

  public Date getData()  
    return data;
   

  public void setData(Date data)  
    this.data = data;
   

  public Category getCategory()  
    return category;
   

  public void setCategory(Category category)  
    this.category = category;
   

  public String getTitle()  
    return title;
   

  public void setTitle(String title)  
    this.title = title;
   

  public String getAnnotation()  
    return annotation;
   

  public void setAnnotation(String annotation)  
    this.annotation = annotation;
   

  public byte[] getPdf()  
    return pdf;
   

  public void setPdf(byte[] pdf)  
    this.pdf = pdf; [42001-224]
2024-07-22 16:29:18.652329+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "[*]package com.example.teachers_db_demo.model;\000a\000aimport jakarta.persistence.*;\000aimport java.util.Date;\000a\000a@Entity\000a@Table(name = ""books"")\000apublic class Book  \000a  @Id\000a  @GeneratedValue(strategy = GenerationType.IDENTITY)\000a  private Long id;\000a\000a  @ManyToOne\000a  @JoinColumn(name=""author_id"", nullable = false)\000a  private Author author;\000a\000a  @Column(name = ""data"", nullable = false)\000a  @Temporal(TemporalType.DATE)\000a  private Date data;\000a\000a  @ManyToOne\000a  @JoinColumn(name = ""category_id"", nullable = false)\000a  private Category category;\000a\000a  @Column(name = ""title"", nullable = false, length = 150)\000a  private String title;\000a\000a  @Column(name = ""annotation"", nullable = false, length = 255)\000a  private String annotation;\000a\000a  @Column(name = ""pdf_content"")\000a  private byte[] pdf;\000a\000a  // Getters and setters\000a  public Long getId()  \000a    return id;\000a   \000a\000a  public void setId(Long id)  \000a    this.id = id;\000a   \000a\000a  public Author getAuthor()  \000a    return author;\000a   \000a\000a  public void setAuthor(Author author)  \000a    this.author = author;\000a   \000a\000a  public Date getData()  \000a    return data;\000a   \000a\000a  public void setData(Date data)  \000a    this.data = data;\000a   \000a\000a  public Category getCategory()  \000a    return category;\000a   \000a\000a  public void setCategory(Category category)  \000a    this.category = category;\000a   \000a\000a  public String getTitle()  \000a    return title;\000a   \000a\000a  public void setTitle(String title)  \000a    this.title = title;\000a   \000a\000a  public String getAnnotation()  \000a    return annotation;\000a   \000a\000a  public void setAnnotation(String annotation)  \000a    this.annotation = annotation;\000a   \000a\000a  public byte[] getPdf()  \000a    return pdf;\000a   \000a\000a  public void setPdf(byte[] pdf)  \000a    this.pdf = pdf;"; expected "PREPARE"; SQL statement:
package com.example.teachers_db_demo.model;

import jakarta.persistence.*;
import java.util.Date;

@Entity
@Table(name = "books")
public class Book  
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @ManyToOne
  @JoinColumn(name="author_id", nullable = false)
  private Author author;

  @Column(name = "data", nullable = false)
  @Temporal(TemporalType.DATE)
  private Date data;

  @ManyToOne
  @JoinColumn(name = "category_id", nullable = false)
  private Category category;

  @Column(name = "title", nullable = false, length = 150)
  private String title;

  @Column(name = "annotation", nullable = false, length = 255)
  private String annotation;

  @Column(name = "pdf_content")
  private byte[] pdf;

  // Getters and setters
  public Long getId()  
    return id;
   

  public void setId(Long id)  
    this.id = id;
   

  public Author getAuthor()  
    return author;
   

  public void setAuthor(Author author)  
    this.author = author;
   

  public Date getData()  
    return data;
   

  public void setData(Date data)  
    this.data = data;
   

  public Category getCategory()  
    return category;
   

  public void setCategory(Category category)  
    this.category = category;
   

  public String getTitle()  
    return title;
   

  public void setTitle(String title)  
    this.title = title;
   

  public String getAnnotation()  
    return annotation;
   

  public void setAnnotation(String annotation)  
    this.annotation = annotation;
   

  public byte[] getPdf()  
    return pdf;
   

  public void setPdf(byte[] pdf)  
    this.pdf = pdf; [42001-224]
2024-07-22 16:32:02.755048+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "[*]package com.example.teachers_db_demo.model;\000a\000aimport jakarta.persistence.*;\000aimport java.util.Date;\000a\000a@Entity\000a@Table(name = ""books"")\000apublic class Book  \000a  @Id\000a  @GeneratedValue(strategy = GenerationType.IDENTITY)\000a  private Long id;\000a\000a  @ManyToOne\000a  @JoinColumn(name=""author_id"", nullable = false)\000a  private Author author;\000a\000a  @Column(name = ""data"", nullable = false)\000a  @Temporal(TemporalType.DATE)\000a  private Date data;\000a\000a  @ManyToOne\000a  @JoinColumn(name = ""category_id"", nullable = false)\000a  private Category category;\000a\000a  @Column(name = ""title"", nullable = false, length = 150)\000a  private String title;\000a\000a  @Column(name = ""annotation"", nullable = false, length = 255)\000a  private String annotation;\000a\000a  @Column(name = ""pdf_content"")\000a  private byte[] pdf;\000a\000a  // Getters and setters\000a  public Long getId()  \000a    return id;\000a   \000a\000a  public void setId(Long id)  \000a    this.id = id;\000a   \000a\000a  public Author getAuthor()  \000a    return author;\000a   \000a\000a  public void setAuthor(Author author)  \000a    this.author = author;\000a   \000a\000a  public Date getData()  \000a    return data;\000a   \000a\000a  public void setData(Date data)  \000a    this.data = data;\000a   \000a\000a  public Category getCategory()  \000a    return category;\000a   \000a\000a  public void setCategory(Category category)  \000a    this.category = category;\000a   \000a\000a  public String getTitle()  \000a    return title;\000a   \000a\000a  public void setTitle(String title)  \000a    this.title = title;\000a   \000a\000a  public String getAnnotation()  \000a    return annotation;\000a   \000a\000a  public void setAnnotation(String annotation)  \000a    this.annotation = annotation;\000a   \000a\000a  public byte[] getPdf()  \000a    return pdf;\000a   \000a\000a  public void setPdf(byte[] pdf)  \000a    this.pdf = pdf;"; expected "PREPARE"; SQL statement:
package com.example.teachers_db_demo.model;

import jakarta.persistence.*;
import java.util.Date;

@Entity
@Table(name = "books")
public class Book  
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @ManyToOne
  @JoinColumn(name="author_id", nullable = false)
  private Author author;

  @Column(name = "data", nullable = false)
  @Temporal(TemporalType.DATE)
  private Date data;

  @ManyToOne
  @JoinColumn(name = "category_id", nullable = false)
  private Category category;

  @Column(name = "title", nullable = false, length = 150)
  private String title;

  @Column(name = "annotation", nullable = false, length = 255)
  private String annotation;

  @Column(name = "pdf_content")
  private byte[] pdf;

  // Getters and setters
  public Long getId()  
    return id;
   

  public void setId(Long id)  
    this.id = id;
   

  public Author getAuthor()  
    return author;
   

  public void setAuthor(Author author)  
    this.author = author;
   

  public Date getData()  
    return data;
   

  public void setData(Date data)  
    this.data = data;
   

  public Category getCategory()  
    return category;
   

  public void setCategory(Category category)  
    this.category = category;
   

  public String getTitle()  
    return title;
   

  public void setTitle(String title)  
    this.title = title;
   

  public String getAnnotation()  
    return annotation;
   

  public void setAnnotation(String annotation)  
    this.annotation = annotation;
   

  public byte[] getPdf()  
    return pdf;
   

  public void setPdf(byte[] pdf)  
    this.pdf = pdf; [42001-224]
2024-07-22 16:37:19.729586+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "[*]package com.example.teachers_db_demo.model;\000a\000aimport jakarta.persistence.*;\000aimport java.util.Date;\000a\000a@Entity\000a@Table(name = ""books"")\000apublic class Book  \000a  @Id\000a  @GeneratedValue(strategy = GenerationType.IDENTITY)\000a  private Long id;\000a\000a  @ManyToOne\000a  @JoinColumn(name=""author_id"", nullable = false)\000a  private Author author;\000a\000a  @Column(name = ""data"", nullable = false)\000a  @Temporal(TemporalType.DATE)\000a  private Date data;\000a\000a  @ManyToOne\000a  @JoinColumn(name = ""category_id"", nullable = false)\000a  private Category category;\000a\000a  @Column(name = ""title"", nullable = false, length = 150)\000a  private String title;\000a\000a  @Column(name = ""annotation"", nullable = false, length = 255)\000a  private String annotation;\000a\000a  @Column(name = ""pdf_content"")\000a  private byte[] pdf;\000a\000a  // Getters and setters\000a  public Long getId()  \000a    return id;\000a   \000a\000a  public void setId(Long id)  \000a    this.id = id;\000a   \000a\000a  public Author getAuthor()  \000a    return author;\000a   \000a\000a  public void setAuthor(Author author)  \000a    this.author = author;\000a   \000a\000a  public Date getData()  \000a    return data;\000a   \000a\000a  public void setData(Date data)  \000a    this.data = data;\000a   \000a\000a  public Category getCategory()  \000a    return category;\000a   \000a\000a  public void setCategory(Category category)  \000a    this.category = category;\000a   \000a\000a  public String getTitle()  \000a    return title;\000a   \000a\000a  public void setTitle(String title)  \000a    this.title = title;\000a   \000a\000a  public String getAnnotation()  \000a    return annotation;\000a   \000a\000a  public void setAnnotation(String annotation)  \000a    this.annotation = annotation;\000a   \000a\000a  public byte[] getPdf()  \000a    return pdf;\000a   \000a\000a  public void setPdf(byte[] pdf)  \000a    this.pdf = pdf;"; expected "PREPARE"; SQL statement:
package com.example.teachers_db_demo.model;

import jakarta.persistence.*;
import java.util.Date;

@Entity
@Table(name = "books")
public class Book  
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @ManyToOne
  @JoinColumn(name="author_id", nullable = false)
  private Author author;

  @Column(name = "data", nullable = false)
  @Temporal(TemporalType.DATE)
  private Date data;

  @ManyToOne
  @JoinColumn(name = "category_id", nullable = false)
  private Category category;

  @Column(name = "title", nullable = false, length = 150)
  private String title;

  @Column(name = "annotation", nullable = false, length = 255)
  private String annotation;

  @Column(name = "pdf_content")
  private byte[] pdf;

  // Getters and setters
  public Long getId()  
    return id;
   

  public void setId(Long id)  
    this.id = id;
   

  public Author getAuthor()  
    return author;
   

  public void setAuthor(Author author)  
    this.author = author;
   

  public Date getData()  
    return data;
   

  public void setData(Date data)  
    this.data = data;
   

  public Category getCategory()  
    return category;
   

  public void setCategory(Category category)  
    this.category = category;
   

  public String getTitle()  
    return title;
   

  public void setTitle(String title)  
    this.title = title;
   

  public String getAnnotation()  
    return annotation;
   

  public void setAnnotation(String annotation)  
    this.annotation = annotation;
   

  public byte[] getPdf()  
    return pdf;
   

  public void setPdf(byte[] pdf)  
    this.pdf = pdf; [42001-224]
2024-07-22 16:38:34.709999+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "[*]package com.example.teachers_db_demo.model;\000a\000aimport jakarta.persistence.*;\000aimport java.util.Date;\000a\000a@Entity\000a@Table(name = ""books"")\000apublic class Book  \000a  @Id\000a  @GeneratedValue(strategy = GenerationType.IDENTITY)\000a  private Long id;\000a\000a  @ManyToOne\000a  @JoinColumn(name=""author_id"", nullable = false)\000a  private Author author;\000a\000a  @Column(name = ""data"", nullable = false)\000a  @Temporal(TemporalType.DATE)\000a  private Date data;\000a\000a  @ManyToOne\000a  @JoinColumn(name = ""category_id"", nullable = false)\000a  private Category category;\000a\000a  @Column(name = ""title"", nullable = false, length = 150)\000a  private String title;\000a\000a  @Column(name = ""annotation"", nullable = false, length = 255)\000a  private String annotation;\000a\000a  @Column(name = ""pdf_content"")\000a  private byte[] pdf;\000a\000a  // Getters and setters\000a  public Long getId()  \000a    return id;\000a   \000a\000a  public void setId(Long id)  \000a    this.id = id;\000a   \000a\000a  public Author getAuthor()  \000a    return author;\000a   \000a\000a  public void setAuthor(Author author)  \000a    this.author = author;\000a   \000a\000a  public Date getData()  \000a    return data;\000a   \000a\000a  public void setData(Date data)  \000a    this.data = data;\000a   \000a\000a  public Category getCategory()  \000a    return category;\000a   \000a\000a  public void setCategory(Category category)  \000a    this.category = category;\000a   \000a\000a  public String getTitle()  \000a    return title;\000a   \000a\000a  public void setTitle(String title)  \000a    this.title = title;\000a   \000a\000a  public String getAnnotation()  \000a    return annotation;\000a   \000a\000a  public void setAnnotation(String annotation)  \000a    this.annotation = annotation;\000a   \000a\000a  public byte[] getPdf()  \000a    return pdf;\000a   \000a\000a  public void setPdf(byte[] pdf)  \000a    this.pdf = pdf;"; expected "PREPARE"; SQL statement:
package com.example.teachers_db_demo.model;

import jakarta.persistence.*;
import java.util.Date;

@Entity
@Table(name = "books")
public class Book  
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @ManyToOne
  @JoinColumn(name="author_id", nullable = false)
  private Author author;

  @Column(name = "data", nullable = false)
  @Temporal(TemporalType.DATE)
  private Date data;

  @ManyToOne
  @JoinColumn(name = "category_id", nullable = false)
  private Category category;

  @Column(name = "title", nullable = false, length = 150)
  private String title;

  @Column(name = "annotation", nullable = false, length = 255)
  private String annotation;

  @Column(name = "pdf_content")
  private byte[] pdf;

  // Getters and setters
  public Long getId()  
    return id;
   

  public void setId(Long id)  
    this.id = id;
   

  public Author getAuthor()  
    return author;
   

  public void setAuthor(Author author)  
    this.author = author;
   

  public Date getData()  
    return data;
   

  public void setData(Date data)  
    this.data = data;
   

  public Category getCategory()  
    return category;
   

  public void setCategory(Category category)  
    this.category = category;
   

  public String getTitle()  
    return title;
   

  public void setTitle(String title)  
    this.title = title;
   

  public String getAnnotation()  
    return annotation;
   

  public void setAnnotation(String annotation)  
    this.annotation = annotation;
   

  public byte[] getPdf()  
    return pdf;
   

  public void setPdf(byte[] pdf)  
    this.pdf = pdf; [42001-224]
2024-07-22 16:39:26.615434+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "[*]package com.example.teachers_db_demo.model;\000a\000aimport jakarta.persistence.*;\000aimport java.util.Date;\000a\000a@Entity\000a@Table(name = ""books"")\000apublic class Book  \000a  @Id\000a  @GeneratedValue(strategy = GenerationType.IDENTITY)\000a  private Long id;\000a\000a  @ManyToOne\000a  @JoinColumn(name=""author_id"", nullable = false)\000a  private Author author;\000a\000a  @Column(name = ""data"", nullable = false)\000a  @Temporal(TemporalType.DATE)\000a  private Date data;\000a\000a  @ManyToOne\000a  @JoinColumn(name = ""category_id"", nullable = false)\000a  private Category category;\000a\000a  @Column(name = ""title"", nullable = false, length = 150)\000a  private String title;\000a\000a  @Column(name = ""annotation"", nullable = false, length = 255)\000a  private String annotation;\000a\000a  @Column(name = ""pdf_content"")\000a  private byte[] pdf;\000a\000a  // Getters and setters\000a  public Long getId()  \000a    return id;\000a   \000a\000a  public void setId(Long id)  \000a    this.id = id;\000a   \000a\000a  public Author getAuthor()  \000a    return author;\000a   \000a\000a  public void setAuthor(Author author)  \000a    this.author = author;\000a   \000a\000a  public Date getData()  \000a    return data;\000a   \000a\000a  public void setData(Date data)  \000a    this.data = data;\000a   \000a\000a  public Category getCategory()  \000a    return category;\000a   \000a\000a  public void setCategory(Category category)  \000a    this.category = category;\000a   \000a\000a  public String getTitle()  \000a    return title;\000a   \000a\000a  public void setTitle(String title)  \000a    this.title = title;\000a   \000a\000a  public String getAnnotation()  \000a    return annotation;\000a   \000a\000a  public void setAnnotation(String annotation)  \000a    this.annotation = annotation;\000a   \000a\000a  public byte[] getPdf()  \000a    return pdf;\000a   \000a\000a  public void setPdf(byte[] pdf)  \000a    this.pdf = pdf;"; expected "PREPARE"; SQL statement:
package com.example.teachers_db_demo.model;

import jakarta.persistence.*;
import java.util.Date;

@Entity
@Table(name = "books")
public class Book  
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @ManyToOne
  @JoinColumn(name="author_id", nullable = false)
  private Author author;

  @Column(name = "data", nullable = false)
  @Temporal(TemporalType.DATE)
  private Date data;

  @ManyToOne
  @JoinColumn(name = "category_id", nullable = false)
  private Category category;

  @Column(name = "title", nullable = false, length = 150)
  private String title;

  @Column(name = "annotation", nullable = false, length = 255)
  private String annotation;

  @Column(name = "pdf_content")
  private byte[] pdf;

  // Getters and setters
  public Long getId()  
    return id;
   

  public void setId(Long id)  
    this.id = id;
   

  public Author getAuthor()  
    return author;
   

  public void setAuthor(Author author)  
    this.author = author;
   

  public Date getData()  
    return data;
   

  public void setData(Date data)  
    this.data = data;
   

  public Category getCategory()  
    return category;
   

  public void setCategory(Category category)  
    this.category = category;
   

  public String getTitle()  
    return title;
   

  public void setTitle(String title)  
    this.title = title;
   

  public String getAnnotation()  
    return annotation;
   

  public void setAnnotation(String annotation)  
    this.annotation = annotation;
   

  public byte[] getPdf()  
    return pdf;
   

  public void setPdf(byte[] pdf)  
    this.pdf = pdf; [42001-224]
2024-07-22 16:41:10.298374+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "[*]package com.example.teachers_db_demo.model;\000a\000aimport jakarta.persistence.*;\000aimport java.util.Date;\000a\000a@Entity\000a@Table(name = ""books"")\000apublic class Book  \000a  @Id\000a  @GeneratedValue(strategy = GenerationType.IDENTITY)\000a  private Long id;\000a\000a  @ManyToOne\000a  @JoinColumn(name=""author_id"", nullable = false)\000a  private Author author;\000a\000a  @Column(name = ""data"", nullable = false)\000a  @Temporal(TemporalType.DATE)\000a  private Date data;\000a\000a  @ManyToOne\000a  @JoinColumn(name = ""category_id"", nullable = false)\000a  private Category category;\000a\000a  @Column(name = ""title"", nullable = false, length = 150)\000a  private String title;\000a\000a  @Column(name = ""annotation"", nullable = false, length = 255)\000a  private String annotation;\000a\000a  @Column(name = ""pdf_content"")\000a  private byte[] pdf;\000a\000a  // Getters and setters\000a  public Long getId()  \000a    return id;\000a   \000a\000a  public void setId(Long id)  \000a    this.id = id;\000a   \000a\000a  public Author getAuthor()  \000a    return author;\000a   \000a\000a  public void setAuthor(Author author)  \000a    this.author = author;\000a   \000a\000a  public Date getData()  \000a    return data;\000a   \000a\000a  public void setData(Date data)  \000a    this.data = data;\000a   \000a\000a  public Category getCategory()  \000a    return category;\000a   \000a\000a  public void setCategory(Category category)  \000a    this.category = category;\000a   \000a\000a  public String getTitle()  \000a    return title;\000a   \000a\000a  public void setTitle(String title)  \000a    this.title = title;\000a   \000a\000a  public String getAnnotation()  \000a    return annotation;\000a   \000a\000a  public void setAnnotation(String annotation)  \000a    this.annotation = annotation;\000a   \000a\000a  public byte[] getPdf()  \000a    return pdf;\000a   \000a\000a  public void setPdf(byte[] pdf)  \000a    this.pdf = pdf;"; expected "PREPARE"; SQL statement:
package com.example.teachers_db_demo.model;

import jakarta.persistence.*;
import java.util.Date;

@Entity
@Table(name = "books")
public class Book  
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @ManyToOne
  @JoinColumn(name="author_id", nullable = false)
  private Author author;

  @Column(name = "data", nullable = false)
  @Temporal(TemporalType.DATE)
  private Date data;

  @ManyToOne
  @JoinColumn(name = "category_id", nullable = false)
  private Category category;

  @Column(name = "title", nullable = false, length = 150)
  private String title;

  @Column(name = "annotation", nullable = false, length = 255)
  private String annotation;

  @Column(name = "pdf_content")
  private byte[] pdf;

  // Getters and setters
  public Long getId()  
    return id;
   

  public void setId(Long id)  
    this.id = id;
   

  public Author getAuthor()  
    return author;
   

  public void setAuthor(Author author)  
    this.author = author;
   

  public Date getData()  
    return data;
   

  public void setData(Date data)  
    this.data = data;
   

  public Category getCategory()  
    return category;
   

  public void setCategory(Category category)  
    this.category = category;
   

  public String getTitle()  
    return title;
   

  public void setTitle(String title)  
    this.title = title;
   

  public String getAnnotation()  
    return annotation;
   

  public void setAnnotation(String annotation)  
    this.annotation = annotation;
   

  public byte[] getPdf()  
    return pdf;
   

  public void setPdf(byte[] pdf)  
    this.pdf = pdf; [42001-224]
2024-07-22 16:47:48.592565+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column count does not match; SQL statement:
INSERT INTO books VALUES(default, 1, '2024-07-01', 2, 'Використання штучного інтелекту', 'штучний інтелект') [21002-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:514)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.command.dml.Insert.doPrepare(Insert.java:295)
	at org.h2.command.dml.DataChangeStatement.prepare(DataChangeStatement.java:37)
	at org.h2.command.Parser.prepareCommand(Parser.java:489)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:639)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:559)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1166)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:245)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at liquibase.executor.jvm.JdbcExecutor$ExecuteStatementCallback.doInStatement(JdbcExecutor.java:467)
	at liquibase.executor.jvm.JdbcExecutor.execute(JdbcExecutor.java:80)
	at liquibase.executor.jvm.JdbcExecutor.execute(JdbcExecutor.java:182)
	at liquibase.executor.AbstractExecutor.execute(AbstractExecutor.java:141)
	at liquibase.database.AbstractJdbcDatabase.executeStatements(AbstractJdbcDatabase.java:1176)
	at liquibase.changelog.ChangeSet.execute(ChangeSet.java:764)
	at liquibase.changelog.visitor.UpdateVisitor.executeAcceptedChange(UpdateVisitor.java:119)
	at liquibase.changelog.visitor.UpdateVisitor.visit(UpdateVisitor.java:68)
	at liquibase.changelog.ChangeLogIterator$2.lambda$run$0(ChangeLogIterator.java:133)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.changelog.ChangeLogIterator$2.run(ChangeLogIterator.java:122)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.Scope.child(Scope.java:256)
	at liquibase.Scope.child(Scope.java:260)
	at liquibase.changelog.ChangeLogIterator.run(ChangeLogIterator.java:89)
	at liquibase.command.core.AbstractUpdateCommandStep.lambda$run$0(AbstractUpdateCommandStep.java:112)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.command.core.AbstractUpdateCommandStep.run(AbstractUpdateCommandStep.java:110)
	at liquibase.command.core.UpdateCommandStep.run(UpdateCommandStep.java:105)
	at liquibase.command.CommandScope.execute(CommandScope.java:219)
	at liquibase.Liquibase.lambda$update$0(Liquibase.java:245)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.Liquibase.runInScope(Liquibase.java:1436)
	at liquibase.Liquibase.update(Liquibase.java:234)
	at liquibase.Liquibase.update(Liquibase.java:212)
	at liquibase.integration.spring.SpringLiquibase.performUpdate(SpringLiquibase.java:297)
	at liquibase.integration.spring.SpringLiquibase.lambda$afterPropertiesSet$0(SpringLiquibase.java:249)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.Scope.child(Scope.java:256)
	at liquibase.integration.spring.SpringLiquibase.afterPropertiesSet(SpringLiquibase.java:242)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1835)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1784)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:313)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:205)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:952)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:335)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1363)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1352)
	at com.example.teachers_db_demo.TeachersDbDemoApplication.main(TeachersDbDemoApplication.java:10)
2024-07-22 16:48:07.612803+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column count does not match; SQL statement:
INSERT INTO books VALUES(default, 1, '2024-07-01', 2, 'Використання штучного інтелекту', 'штучний інтелект') [21002-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:514)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.command.dml.Insert.doPrepare(Insert.java:295)
	at org.h2.command.dml.DataChangeStatement.prepare(DataChangeStatement.java:37)
	at org.h2.command.Parser.prepareCommand(Parser.java:489)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:639)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:559)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1166)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:245)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at liquibase.executor.jvm.JdbcExecutor$ExecuteStatementCallback.doInStatement(JdbcExecutor.java:467)
	at liquibase.executor.jvm.JdbcExecutor.execute(JdbcExecutor.java:80)
	at liquibase.executor.jvm.JdbcExecutor.execute(JdbcExecutor.java:182)
	at liquibase.executor.AbstractExecutor.execute(AbstractExecutor.java:141)
	at liquibase.database.AbstractJdbcDatabase.executeStatements(AbstractJdbcDatabase.java:1176)
	at liquibase.changelog.ChangeSet.execute(ChangeSet.java:764)
	at liquibase.changelog.visitor.UpdateVisitor.executeAcceptedChange(UpdateVisitor.java:119)
	at liquibase.changelog.visitor.UpdateVisitor.visit(UpdateVisitor.java:68)
	at liquibase.changelog.ChangeLogIterator$2.lambda$run$0(ChangeLogIterator.java:133)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.changelog.ChangeLogIterator$2.run(ChangeLogIterator.java:122)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.Scope.child(Scope.java:256)
	at liquibase.Scope.child(Scope.java:260)
	at liquibase.changelog.ChangeLogIterator.run(ChangeLogIterator.java:89)
	at liquibase.command.core.AbstractUpdateCommandStep.lambda$run$0(AbstractUpdateCommandStep.java:112)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.command.core.AbstractUpdateCommandStep.run(AbstractUpdateCommandStep.java:110)
	at liquibase.command.core.UpdateCommandStep.run(UpdateCommandStep.java:105)
	at liquibase.command.CommandScope.execute(CommandScope.java:219)
	at liquibase.Liquibase.lambda$update$0(Liquibase.java:245)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.Liquibase.runInScope(Liquibase.java:1436)
	at liquibase.Liquibase.update(Liquibase.java:234)
	at liquibase.Liquibase.update(Liquibase.java:212)
	at liquibase.integration.spring.SpringLiquibase.performUpdate(SpringLiquibase.java:297)
	at liquibase.integration.spring.SpringLiquibase.lambda$afterPropertiesSet$0(SpringLiquibase.java:249)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.Scope.child(Scope.java:256)
	at liquibase.integration.spring.SpringLiquibase.afterPropertiesSet(SpringLiquibase.java:242)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1835)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1784)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:313)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:205)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:952)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:335)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1363)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1352)
	at com.example.teachers_db_demo.TeachersDbDemoApplication.main(TeachersDbDemoApplication.java:10)
2024-07-22 16:50:46.511011+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column count does not match; SQL statement:
INSERT INTO books VALUES(default, 1, '2024-07-01', 2, 'Використання штучного інтелекту', 'штучний інтелект') [21002-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:514)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.command.dml.Insert.doPrepare(Insert.java:295)
	at org.h2.command.dml.DataChangeStatement.prepare(DataChangeStatement.java:37)
	at org.h2.command.Parser.prepareCommand(Parser.java:489)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:639)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:559)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1166)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:245)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at liquibase.executor.jvm.JdbcExecutor$ExecuteStatementCallback.doInStatement(JdbcExecutor.java:467)
	at liquibase.executor.jvm.JdbcExecutor.execute(JdbcExecutor.java:80)
	at liquibase.executor.jvm.JdbcExecutor.execute(JdbcExecutor.java:182)
	at liquibase.executor.AbstractExecutor.execute(AbstractExecutor.java:141)
	at liquibase.database.AbstractJdbcDatabase.executeStatements(AbstractJdbcDatabase.java:1176)
	at liquibase.changelog.ChangeSet.execute(ChangeSet.java:764)
	at liquibase.changelog.visitor.UpdateVisitor.executeAcceptedChange(UpdateVisitor.java:119)
	at liquibase.changelog.visitor.UpdateVisitor.visit(UpdateVisitor.java:68)
	at liquibase.changelog.ChangeLogIterator$2.lambda$run$0(ChangeLogIterator.java:133)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.changelog.ChangeLogIterator$2.run(ChangeLogIterator.java:122)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.Scope.child(Scope.java:256)
	at liquibase.Scope.child(Scope.java:260)
	at liquibase.changelog.ChangeLogIterator.run(ChangeLogIterator.java:89)
	at liquibase.command.core.AbstractUpdateCommandStep.lambda$run$0(AbstractUpdateCommandStep.java:112)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.command.core.AbstractUpdateCommandStep.run(AbstractUpdateCommandStep.java:110)
	at liquibase.command.core.UpdateCommandStep.run(UpdateCommandStep.java:105)
	at liquibase.command.CommandScope.execute(CommandScope.java:219)
	at liquibase.Liquibase.lambda$update$0(Liquibase.java:245)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.Liquibase.runInScope(Liquibase.java:1436)
	at liquibase.Liquibase.update(Liquibase.java:234)
	at liquibase.Liquibase.update(Liquibase.java:212)
	at liquibase.integration.spring.SpringLiquibase.performUpdate(SpringLiquibase.java:297)
	at liquibase.integration.spring.SpringLiquibase.lambda$afterPropertiesSet$0(SpringLiquibase.java:249)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.Scope.child(Scope.java:256)
	at liquibase.integration.spring.SpringLiquibase.afterPropertiesSet(SpringLiquibase.java:242)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1835)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1784)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:313)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:205)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:952)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:335)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1363)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1352)
	at com.example.teachers_db_demo.TeachersDbDemoApplication.main(TeachersDbDemoApplication.java:10)
2024-07-22 16:53:40.876432+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column count does not match; SQL statement:
INSERT INTO books VALUES(default, 1, '2024-07-01', 2, 'Використання штучного інтелекту', 'штучний інтелект') [21002-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:514)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.command.dml.Insert.doPrepare(Insert.java:295)
	at org.h2.command.dml.DataChangeStatement.prepare(DataChangeStatement.java:37)
	at org.h2.command.Parser.prepareCommand(Parser.java:489)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:639)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:559)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1166)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:245)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at liquibase.executor.jvm.JdbcExecutor$ExecuteStatementCallback.doInStatement(JdbcExecutor.java:467)
	at liquibase.executor.jvm.JdbcExecutor.execute(JdbcExecutor.java:80)
	at liquibase.executor.jvm.JdbcExecutor.execute(JdbcExecutor.java:182)
	at liquibase.executor.AbstractExecutor.execute(AbstractExecutor.java:141)
	at liquibase.database.AbstractJdbcDatabase.executeStatements(AbstractJdbcDatabase.java:1176)
	at liquibase.changelog.ChangeSet.execute(ChangeSet.java:764)
	at liquibase.changelog.visitor.UpdateVisitor.executeAcceptedChange(UpdateVisitor.java:119)
	at liquibase.changelog.visitor.UpdateVisitor.visit(UpdateVisitor.java:68)
	at liquibase.changelog.ChangeLogIterator$2.lambda$run$0(ChangeLogIterator.java:133)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.changelog.ChangeLogIterator$2.run(ChangeLogIterator.java:122)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.Scope.child(Scope.java:256)
	at liquibase.Scope.child(Scope.java:260)
	at liquibase.changelog.ChangeLogIterator.run(ChangeLogIterator.java:89)
	at liquibase.command.core.AbstractUpdateCommandStep.lambda$run$0(AbstractUpdateCommandStep.java:112)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.command.core.AbstractUpdateCommandStep.run(AbstractUpdateCommandStep.java:110)
	at liquibase.command.core.UpdateCommandStep.run(UpdateCommandStep.java:105)
	at liquibase.command.CommandScope.execute(CommandScope.java:219)
	at liquibase.Liquibase.lambda$update$0(Liquibase.java:245)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.Liquibase.runInScope(Liquibase.java:1436)
	at liquibase.Liquibase.update(Liquibase.java:234)
	at liquibase.Liquibase.update(Liquibase.java:212)
	at liquibase.integration.spring.SpringLiquibase.performUpdate(SpringLiquibase.java:297)
	at liquibase.integration.spring.SpringLiquibase.lambda$afterPropertiesSet$0(SpringLiquibase.java:249)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.Scope.child(Scope.java:256)
	at liquibase.integration.spring.SpringLiquibase.afterPropertiesSet(SpringLiquibase.java:242)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1835)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1784)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:313)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:205)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:952)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:335)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1363)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1352)
	at com.example.teachers_db_demo.TeachersDbDemoApplication.main(TeachersDbDemoApplication.java:10)
2024-07-22 17:24:07.627707+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column count does not match; SQL statement:
INSERT INTO books VALUES(default, 1, '2024-07-01', 2, 'Використання штучного інтелекту', 'штучний інтелект') [21002-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:514)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.command.dml.Insert.doPrepare(Insert.java:295)
	at org.h2.command.dml.DataChangeStatement.prepare(DataChangeStatement.java:37)
	at org.h2.command.Parser.prepareCommand(Parser.java:489)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:639)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:559)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1166)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:245)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at liquibase.executor.jvm.JdbcExecutor$ExecuteStatementCallback.doInStatement(JdbcExecutor.java:467)
	at liquibase.executor.jvm.JdbcExecutor.execute(JdbcExecutor.java:80)
	at liquibase.executor.jvm.JdbcExecutor.execute(JdbcExecutor.java:182)
	at liquibase.executor.AbstractExecutor.execute(AbstractExecutor.java:141)
	at liquibase.database.AbstractJdbcDatabase.executeStatements(AbstractJdbcDatabase.java:1176)
	at liquibase.changelog.ChangeSet.execute(ChangeSet.java:764)
	at liquibase.changelog.visitor.UpdateVisitor.executeAcceptedChange(UpdateVisitor.java:119)
	at liquibase.changelog.visitor.UpdateVisitor.visit(UpdateVisitor.java:68)
	at liquibase.changelog.ChangeLogIterator$2.lambda$run$0(ChangeLogIterator.java:133)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.changelog.ChangeLogIterator$2.run(ChangeLogIterator.java:122)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.Scope.child(Scope.java:256)
	at liquibase.Scope.child(Scope.java:260)
	at liquibase.changelog.ChangeLogIterator.run(ChangeLogIterator.java:89)
	at liquibase.command.core.AbstractUpdateCommandStep.lambda$run$0(AbstractUpdateCommandStep.java:112)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.command.core.AbstractUpdateCommandStep.run(AbstractUpdateCommandStep.java:110)
	at liquibase.command.core.UpdateCommandStep.run(UpdateCommandStep.java:105)
	at liquibase.command.CommandScope.execute(CommandScope.java:219)
	at liquibase.Liquibase.lambda$update$0(Liquibase.java:245)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.Liquibase.runInScope(Liquibase.java:1436)
	at liquibase.Liquibase.update(Liquibase.java:234)
	at liquibase.Liquibase.update(Liquibase.java:212)
	at liquibase.integration.spring.SpringLiquibase.performUpdate(SpringLiquibase.java:297)
	at liquibase.integration.spring.SpringLiquibase.lambda$afterPropertiesSet$0(SpringLiquibase.java:249)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.Scope.child(Scope.java:256)
	at liquibase.integration.spring.SpringLiquibase.afterPropertiesSet(SpringLiquibase.java:242)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1835)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1784)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:313)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:205)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:952)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:335)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1363)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1352)
	at com.example.teachers_db_demo.TeachersDbDemoApplication.main(TeachersDbDemoApplication.java:10)
2024-07-22 17:24:50.745239+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column count does not match; SQL statement:
INSERT INTO books VALUES(default, 1, '2024-07-01', 2, 'Використання штучного інтелекту', 'штучний інтелект') [21002-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:514)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.message.DbException.get(DbException.java:188)
	at org.h2.command.dml.Insert.doPrepare(Insert.java:295)
	at org.h2.command.dml.DataChangeStatement.prepare(DataChangeStatement.java:37)
	at org.h2.command.Parser.prepareCommand(Parser.java:489)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:639)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:559)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1166)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:245)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at liquibase.executor.jvm.JdbcExecutor$ExecuteStatementCallback.doInStatement(JdbcExecutor.java:467)
	at liquibase.executor.jvm.JdbcExecutor.execute(JdbcExecutor.java:80)
	at liquibase.executor.jvm.JdbcExecutor.execute(JdbcExecutor.java:182)
	at liquibase.executor.AbstractExecutor.execute(AbstractExecutor.java:141)
	at liquibase.database.AbstractJdbcDatabase.executeStatements(AbstractJdbcDatabase.java:1176)
	at liquibase.changelog.ChangeSet.execute(ChangeSet.java:764)
	at liquibase.changelog.visitor.UpdateVisitor.executeAcceptedChange(UpdateVisitor.java:119)
	at liquibase.changelog.visitor.UpdateVisitor.visit(UpdateVisitor.java:68)
	at liquibase.changelog.ChangeLogIterator$2.lambda$run$0(ChangeLogIterator.java:133)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.changelog.ChangeLogIterator$2.run(ChangeLogIterator.java:122)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.Scope.child(Scope.java:256)
	at liquibase.Scope.child(Scope.java:260)
	at liquibase.changelog.ChangeLogIterator.run(ChangeLogIterator.java:89)
	at liquibase.command.core.AbstractUpdateCommandStep.lambda$run$0(AbstractUpdateCommandStep.java:112)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.command.core.AbstractUpdateCommandStep.run(AbstractUpdateCommandStep.java:110)
	at liquibase.command.core.UpdateCommandStep.run(UpdateCommandStep.java:105)
	at liquibase.command.CommandScope.execute(CommandScope.java:219)
	at liquibase.Liquibase.lambda$update$0(Liquibase.java:245)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.Liquibase.runInScope(Liquibase.java:1436)
	at liquibase.Liquibase.update(Liquibase.java:234)
	at liquibase.Liquibase.update(Liquibase.java:212)
	at liquibase.integration.spring.SpringLiquibase.performUpdate(SpringLiquibase.java:297)
	at liquibase.integration.spring.SpringLiquibase.lambda$afterPropertiesSet$0(SpringLiquibase.java:249)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.Scope.child(Scope.java:256)
	at liquibase.integration.spring.SpringLiquibase.afterPropertiesSet(SpringLiquibase.java:242)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1835)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1784)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:313)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:205)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:952)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:335)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1363)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1352)
	at com.example.teachers_db_demo.TeachersDbDemoApplication.main(TeachersDbDemoApplication.java:10)
2024-07-23 01:50:23.554441+03:00 jdbc[14]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "SELECT * FROM BOOKS AUTHORS [*]AUTHORS"; SQL statement:
SELECT * FROM BOOKS AUTHORS AUTHORS [42000-224]
2024-07-23 01:50:26.788466+03:00 jdbc[14]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "SELECT * FROM BOOKS AUTHORS [*]AUTHORS AUTHORS"; SQL statement:
SELECT * FROM BOOKS AUTHORS AUTHORS AUTHORS [42000-224]
2024-07-23 02:00:02.548603+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "DATABASECHANGELOGLOCK" not found; SQL statement:
SELECT COUNT(*) FROM PUBLIC.DATABASECHANGELOGLOCK [42102-224]
2024-07-23 02:00:02.752301+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "AUTHORS" already exists; SQL statement:
create TABLE authors (
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(20) NOT NULL,
    last_name VARCHAR(20) NOT NULL
) [42101-224]
2024-07-23 02:00:56.484903+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "AUTHORS" already exists; SQL statement:
create TABLE authors (
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(20) NOT NULL,
    last_name VARCHAR(20) NOT NULL
) [42101-224]
2024-07-23 02:01:27.281945+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "AUTHORS" already exists; SQL statement:
create TABLE authors (
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(20) NOT NULL,
    last_name VARCHAR(20) NOT NULL
) [42101-224]
2024-07-23 02:03:32.700149+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "AUTHORS" already exists; SQL statement:
create TABLE authors (
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(20) NOT NULL,
    last_name VARCHAR(20) NOT NULL
) [42101-224]
2024-07-23 02:04:04.869904+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "AUTHORS" already exists; SQL statement:
create TABLE authors (
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(20) NOT NULL,
    last_name VARCHAR(20) NOT NULL
) [42101-224]
2024-07-23 02:05:39.784382+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "AUTHORS" already exists; SQL statement:
create TABLE authors (
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(20) NOT NULL,
    last_name VARCHAR(20) NOT NULL
) [42101-224]
2024-07-23 02:06:32.346084+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "AUTHORS" already exists; SQL statement:
create TABLE authors (
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(20) NOT NULL,
    last_name VARCHAR(20) NOT NULL
) [42101-224]
2024-07-23 02:11:51.168716+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "AUTHORS" already exists; SQL statement:
create TABLE authors (
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(20) NOT NULL,
    last_name VARCHAR(20) NOT NULL
) [42101-224]
2024-07-23 02:12:34.251661+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "AUTHORS" already exists; SQL statement:
create TABLE authors (
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(20) NOT NULL,
    last_name VARCHAR(20) NOT NULL
) [42101-224]
2024-07-23 02:12:52.860918+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "AUTHORS" already exists; SQL statement:
create TABLE authors (
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(20) NOT NULL,
    last_name VARCHAR(20) NOT NULL
) [42101-224]
2024-07-23 02:13:21.346206+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "AUTHORS" already exists; SQL statement:
create TABLE authors (
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(20) NOT NULL,
    last_name VARCHAR(20) NOT NULL
) [42101-224]
2024-07-23 02:15:18.979607+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "AUTHORS" already exists; SQL statement:
create TABLE authors (
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(20) NOT NULL,
    last_name VARCHAR(20) NOT NULL
) [42101-224]
2024-07-23 02:29:24.349189+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "AUTHORS" already exists; SQL statement:
create TABLE authors (
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(20) NOT NULL,
    last_name VARCHAR(20) NOT NULL
) [42101-224]
2024-07-23 02:29:58.084535+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "AUTHORS" already exists; SQL statement:
create TABLE authors (
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(20) NOT NULL,
    last_name VARCHAR(20) NOT NULL
) [42101-224]
2024-07-23 02:39:43.958316+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "AUTHORS" already exists; SQL statement:
create TABLE authors (
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(20) NOT NULL,
    last_name VARCHAR(20) NOT NULL
) [42101-224]
2024-07-23 02:40:33.741007+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "AUTHORS" already exists; SQL statement:
create TABLE authors (
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(20) NOT NULL,
    last_name VARCHAR(20) NOT NULL
) [42101-224]
2024-07-23 02:40:53.478342+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "AUTHORS" already exists; SQL statement:
create TABLE authors (
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(20) NOT NULL,
    last_name VARCHAR(20) NOT NULL
) [42101-224]
2024-07-23 02:47:26.247402+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Cannot drop "AUTHORS" because "BOOK_AUTHOR_FK" depends on it; SQL statement:
DROP TABLE IF EXISTS authors [90107-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:644)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.command.ddl.DropTable.prepareDrop(DropTable.java:108)
	at org.h2.command.ddl.DropTable.update(DropTable.java:133)
	at org.h2.command.CommandContainer.update(CommandContainer.java:169)
	at org.h2.command.Command.executeUpdate(Command.java:256)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:262)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at liquibase.executor.jvm.JdbcExecutor$ExecuteStatementCallback.doInStatement(JdbcExecutor.java:467)
	at liquibase.executor.jvm.JdbcExecutor.execute(JdbcExecutor.java:80)
	at liquibase.executor.jvm.JdbcExecutor.execute(JdbcExecutor.java:182)
	at liquibase.executor.AbstractExecutor.execute(AbstractExecutor.java:141)
	at liquibase.database.AbstractJdbcDatabase.executeStatements(AbstractJdbcDatabase.java:1176)
	at liquibase.changelog.ChangeSet.execute(ChangeSet.java:764)
	at liquibase.changelog.visitor.UpdateVisitor.executeAcceptedChange(UpdateVisitor.java:119)
	at liquibase.changelog.visitor.UpdateVisitor.visit(UpdateVisitor.java:68)
	at liquibase.changelog.ChangeLogIterator$2.lambda$run$0(ChangeLogIterator.java:133)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.changelog.ChangeLogIterator$2.run(ChangeLogIterator.java:122)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.Scope.child(Scope.java:256)
	at liquibase.Scope.child(Scope.java:260)
	at liquibase.changelog.ChangeLogIterator.run(ChangeLogIterator.java:89)
	at liquibase.command.core.AbstractUpdateCommandStep.lambda$run$0(AbstractUpdateCommandStep.java:112)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.command.core.AbstractUpdateCommandStep.run(AbstractUpdateCommandStep.java:110)
	at liquibase.command.core.UpdateCommandStep.run(UpdateCommandStep.java:105)
	at liquibase.command.CommandScope.execute(CommandScope.java:219)
	at liquibase.Liquibase.lambda$update$0(Liquibase.java:245)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.Liquibase.runInScope(Liquibase.java:1436)
	at liquibase.Liquibase.update(Liquibase.java:234)
	at liquibase.Liquibase.update(Liquibase.java:212)
	at liquibase.integration.spring.SpringLiquibase.performUpdate(SpringLiquibase.java:297)
	at liquibase.integration.spring.SpringLiquibase.lambda$afterPropertiesSet$0(SpringLiquibase.java:249)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.Scope.child(Scope.java:256)
	at liquibase.integration.spring.SpringLiquibase.afterPropertiesSet(SpringLiquibase.java:242)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1835)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1784)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:313)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:205)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:952)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:335)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1363)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1352)
	at com.example.teachers_db_demo.TeachersDbDemoApplication.main(TeachersDbDemoApplication.java:10)
2024-07-23 02:55:23.373322+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Cannot drop "AUTHORS" because "BOOK_AUTHOR_FK" depends on it; SQL statement:
DROP TABLE IF EXISTS authors [90107-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:644)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.command.ddl.DropTable.prepareDrop(DropTable.java:108)
	at org.h2.command.ddl.DropTable.update(DropTable.java:133)
	at org.h2.command.CommandContainer.update(CommandContainer.java:169)
	at org.h2.command.Command.executeUpdate(Command.java:256)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:262)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at liquibase.executor.jvm.JdbcExecutor$ExecuteStatementCallback.doInStatement(JdbcExecutor.java:467)
	at liquibase.executor.jvm.JdbcExecutor.execute(JdbcExecutor.java:80)
	at liquibase.executor.jvm.JdbcExecutor.execute(JdbcExecutor.java:182)
	at liquibase.executor.AbstractExecutor.execute(AbstractExecutor.java:141)
	at liquibase.database.AbstractJdbcDatabase.executeStatements(AbstractJdbcDatabase.java:1176)
	at liquibase.changelog.ChangeSet.execute(ChangeSet.java:764)
	at liquibase.changelog.visitor.UpdateVisitor.executeAcceptedChange(UpdateVisitor.java:119)
	at liquibase.changelog.visitor.UpdateVisitor.visit(UpdateVisitor.java:68)
	at liquibase.changelog.ChangeLogIterator$2.lambda$run$0(ChangeLogIterator.java:133)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.changelog.ChangeLogIterator$2.run(ChangeLogIterator.java:122)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.Scope.child(Scope.java:256)
	at liquibase.Scope.child(Scope.java:260)
	at liquibase.changelog.ChangeLogIterator.run(ChangeLogIterator.java:89)
	at liquibase.command.core.AbstractUpdateCommandStep.lambda$run$0(AbstractUpdateCommandStep.java:112)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.command.core.AbstractUpdateCommandStep.run(AbstractUpdateCommandStep.java:110)
	at liquibase.command.core.UpdateCommandStep.run(UpdateCommandStep.java:105)
	at liquibase.command.CommandScope.execute(CommandScope.java:219)
	at liquibase.Liquibase.lambda$update$0(Liquibase.java:245)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.Liquibase.runInScope(Liquibase.java:1436)
	at liquibase.Liquibase.update(Liquibase.java:234)
	at liquibase.Liquibase.update(Liquibase.java:212)
	at liquibase.integration.spring.SpringLiquibase.performUpdate(SpringLiquibase.java:297)
	at liquibase.integration.spring.SpringLiquibase.lambda$afterPropertiesSet$0(SpringLiquibase.java:249)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.Scope.child(Scope.java:256)
	at liquibase.integration.spring.SpringLiquibase.afterPropertiesSet(SpringLiquibase.java:242)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1835)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1784)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:313)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:205)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:952)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:335)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1363)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1352)
	at com.example.teachers_db_demo.TeachersDbDemoApplication.main(TeachersDbDemoApplication.java:10)
2024-07-23 02:58:16.231059+03:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Cannot drop "AUTHORS" because "BOOK_AUTHOR_FK" depends on it; SQL statement:
DROP TABLE IF EXISTS authors [90107-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:644)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.command.ddl.DropTable.prepareDrop(DropTable.java:108)
	at org.h2.command.ddl.DropTable.update(DropTable.java:133)
	at org.h2.command.CommandContainer.update(CommandContainer.java:169)
	at org.h2.command.Command.executeUpdate(Command.java:256)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:262)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:231)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at liquibase.executor.jvm.JdbcExecutor$ExecuteStatementCallback.doInStatement(JdbcExecutor.java:467)
	at liquibase.executor.jvm.JdbcExecutor.execute(JdbcExecutor.java:80)
	at liquibase.executor.jvm.JdbcExecutor.execute(JdbcExecutor.java:182)
	at liquibase.executor.AbstractExecutor.execute(AbstractExecutor.java:141)
	at liquibase.database.AbstractJdbcDatabase.executeStatements(AbstractJdbcDatabase.java:1176)
	at liquibase.changelog.ChangeSet.execute(ChangeSet.java:764)
	at liquibase.changelog.visitor.UpdateVisitor.executeAcceptedChange(UpdateVisitor.java:119)
	at liquibase.changelog.visitor.UpdateVisitor.visit(UpdateVisitor.java:68)
	at liquibase.changelog.ChangeLogIterator$2.lambda$run$0(ChangeLogIterator.java:133)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.changelog.ChangeLogIterator$2.run(ChangeLogIterator.java:122)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.Scope.child(Scope.java:256)
	at liquibase.Scope.child(Scope.java:260)
	at liquibase.changelog.ChangeLogIterator.run(ChangeLogIterator.java:89)
	at liquibase.command.core.AbstractUpdateCommandStep.lambda$run$0(AbstractUpdateCommandStep.java:112)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.command.core.AbstractUpdateCommandStep.run(AbstractUpdateCommandStep.java:110)
	at liquibase.command.core.UpdateCommandStep.run(UpdateCommandStep.java:105)
	at liquibase.command.CommandScope.execute(CommandScope.java:219)
	at liquibase.Liquibase.lambda$update$0(Liquibase.java:245)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.Liquibase.runInScope(Liquibase.java:1436)
	at liquibase.Liquibase.update(Liquibase.java:234)
	at liquibase.Liquibase.update(Liquibase.java:212)
	at liquibase.integration.spring.SpringLiquibase.performUpdate(SpringLiquibase.java:297)
	at liquibase.integration.spring.SpringLiquibase.lambda$afterPropertiesSet$0(SpringLiquibase.java:249)
	at liquibase.Scope.lambda$child$0(Scope.java:190)
	at liquibase.Scope.child(Scope.java:199)
	at liquibase.Scope.child(Scope.java:189)
	at liquibase.Scope.child(Scope.java:168)
	at liquibase.Scope.child(Scope.java:256)
	at liquibase.integration.spring.SpringLiquibase.afterPropertiesSet(SpringLiquibase.java:242)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1835)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1784)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:313)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:205)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:952)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:624)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:335)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1363)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1352)
	at com.example.teachers_db_demo.TeachersDbDemoApplication.main(TeachersDbDemoApplication.java:10)
